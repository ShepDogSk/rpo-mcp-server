#!/usr/bin/env node

/**
 * Test script pre RPO MCP Server
 * Umo≈æ≈àuje testovanie servera bez MCP klienta
 */

import { RPOClient } from '../dist/rpo-client.js';

async function testRPOClient() {
  console.log('üß™ Testovanie RPO MCP Server...\n');
  
  const client = new RPOClient();
  
  try {
    // Test 1: Health check
    console.log('1Ô∏è‚É£ Testovanie pripojenia...');
    const isHealthy = await client.healthCheck();
    console.log(`   Pripojenie: ${isHealthy ? '‚úÖ OK' : '‚ùå CHYBA'}\n`);
    
    if (!isHealthy) {
      console.log('‚ùå Server nie je dostupn√Ω. Ukonƒçujem testy.');
      process.exit(1);
    }
    
    // Test 2: Vyhƒæad√°vanie
    console.log('2Ô∏è‚É£ Testovanie vyhƒæad√°vania...');
    try {
      const searchResult = await client.search({
        fullName: 'Tesco',
        onlyActive: true
      });
      
      console.log(`   N√°jden√Ωch z√°znamov: ${searchResult.results.length}`);
      if (searchResult.results.length > 0) {
        const first = searchResult.results[0];
        console.log(`   Prv√Ω v√Ωsledok: ${first.fullNames?.[0]?.value || 'N/A'} (ID: ${first.id})`);
      }
      console.log('   Vyhƒæad√°vanie: ‚úÖ OK\n');
    } catch (error) {
      console.log(`   Vyhƒæad√°vanie: ‚ùå CHYBA - ${error.message}\n`);
    }
    
    // Test 3: Detail (ak m√°me v√Ωsledky z vyhƒæad√°vania)
    console.log('3Ô∏è‚É£ Testovanie detailu...');
    try {
      // Pou≈æijeme zn√°me IƒåO pre test
      const searchForDetail = await client.search({
        identifier: '00151700', // Tesco Stores SR
        onlyActive: true
      });
      
      if (searchForDetail.results.length > 0) {
        const entityId = searchForDetail.results[0].id.toString();
        const detail = await client.getDetail({
          id: entityId,
          showHistoricalData: false
        });
        
        console.log(`   Detail pre ID ${entityId}: ‚úÖ OK`);
        console.log(`   N√°zov: ${detail.fullNames?.[0]?.value || 'N/A'}`);
        console.log(`   IƒåO: ${detail.identifiers?.[0]?.value || 'N/A'}`);
      } else {
        console.log('   Detail: ‚ö†Ô∏è  ≈Ωiadne z√°znamy na testovanie');
      }
      console.log();
    } catch (error) {
      console.log(`   Detail: ‚ùå CHYBA - ${error.message}\n`);
    }
    
    // Test 4: Chybov√© stavy
    console.log('4Ô∏è‚É£ Testovanie chybov√Ωch stavov...');
    try {
      await client.search({});
      console.log('   Chybov√© stavy: ‚ùå CHYBA - Mal by hodi≈• chybu pre pr√°zdne parametre');
    } catch (error) {
      console.log('   Chybov√© stavy: ‚úÖ OK - Spr√°vne zachyt√°va chyby');
    }
    console.log();
    
    console.log('üéâ V≈°etky testy dokonƒçen√©!');
    
  } catch (error) {
    console.error('‚ùå Kritick√° chyba pri testovan√≠:', error.message);
    process.exit(1);
  }
}

// Spustenie testov
testRPOClient().catch(console.error);
